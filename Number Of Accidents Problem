// Ryan Marinelli 
// Question 4 Safest Driving Area 
// pg 373

#include <iostream>
#include <map>
#include <set>
#include <algorithm>
#include <functional>


using namespace std;

// Prototyping function 
void getNumAccidents();
void findLowest();

//Base Class
 class Area{
     protected:
        int numOfAccidents;
        
     public:
       int getNumAccidents(numOfAccidents)
 }

//Overriding number of Accidents for data from northern area 
  class north: public Area{
      protected:
        static int numOfAccidents;
        
      public:
       int getNumAccidents(numOfAccidents)
  }
  
 //Overriding number of Accidents for data from southern area
  class south: public Area{
      protected:
        static int numOfAccidents;
        
      public:
       int getNumAccidents(numOfAccidents)
  }
  
  //Overriding number of Accidents for data from eastern area
  class east : public Area{
      protected:
        static int numOfAccidents;
        
      public:
       int getNumAccidents(numOfAccidents)
  }
  
  //Overriding number of Accidents for data from western area
  class west: public Area{
      protected:
       static  int numOfAccidents;
        
      public:
       int getNumAccidents(numOfAccidents)
      
  } 
  
  //Overriding number of Accidents for data from central area
  class central: public Area{
      protected:
      static int numOfAccidents;
      
      public:
        int getNumAccidents(numOfAccidents)
  }
  
    int main()
  {
      // Inputs data from north 
      cout << "How many accidents occured in the north\n"
      cin >> north.numOfAccidents;
      
      cout << "How many accidents occured in the south\n"
      cin >> south.numOfAccidents;
      
      cout << "How many accidents occured in the east\n"
      cin >> east.numOfAccidents;
      
      cout << "How many accidents occured in the west\n"
      cin >> west.numOfAccidents;
      
      cout << "How many accidents occured in the central\n"
      cin >> central.numOfAccidents;
      
      if(north.numOfAccidents == 0)
       {
           cout <<"Please reenter a value for the north\n"
       }
      
      if(south.numOfAccidents == 0)
       {
           cout <<"Please reenter a value for the south\n"
       }
      
      if(east.numOfAccidents == 0)
       {
           cout <<"Please reenter a value for the east\n"
       }
       
       
      if(west.numOfAccidents == 0)
       {
           cout <<"Please reenter a value for the west\n"
       } 
       
       if(central.numOfAccidents == 0)
       {
           cout <<"Please reenter a value for the central\n"
       }  
       
       
       std::map<std::string, int> Map = { { north.numOfAccidents, north.getNumAccidents() }, { south.numOfAccidents, south.getNumAccidents() },
			{ east.numOfAccidents, east.getNumAccidents()}, { west.numOfAccidents, west.getNumAccidents()}, {central.numOfAccidents, central.getNumAccidents()};
       
       typedef std::function<bool(std::pair<std::string, int>, std::pair<std::string, int>)> Comparator;
       
       Comparator compFunctor =
			[](std::pair<std::string, int> elem1 ,std::pair<std::string, int> elem2)
			{
				return elem1.second < elem2.second;
			};
			
		std::set<std::pair<std::string, int>, Comparator> Map(
			Map.begin(), Map.end(), compFunctor);
			
		for (std::pair<std::string, int> element : setOfWords)
		std::cout << element.first << " :: " << element.second << std::endl;
 
	    return 0;
	
  }
